apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.github.ykrasik'
version = getProperty('version')
ext.packaging = 'jar'

def buildType
def sonatypeRepositoryUrl

// set build variables based on build type (release, continuous integration, development)
if (hasProperty("release")) {
    buildType = "release"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("snapshot")) {
    buildType = "snapshot"
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    buildType = "local"
}

repositories {
    mavenCentral()
}

task artifactDocs(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task artifactSources(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives artifactDocs
    archives artifactSources
}

if (buildType == "release") {
    signing {
        sign configurations.archives
    }
} else {
    task signArchives << {
        // do nothing
    }
}

rootProject.ext {
    confirmAsked = false
}

uploadArchives {
    dependsOn test

    doFirst {
        if (!confirmAsked) {
            rootProject.ext.confirmAsked = true
            println "Performing $buildType build : $version"
            def console = System.console()
            if (!console) {
                throw new Exception("Error getting console!")
            }
            final String confirm = console.readLine('> Confirm(y/n): ')
            if (confirm.toUpperCase() != "Y") {
                throw new Exception("Aborted!")
            }
        }
    }

    repositories {
        if (buildType == "local") {
            mavenLocal()
        } else {
            mavenDeployer {
                if (buildType == "release") {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                }

                repository(url: sonatypeRepositoryUrl) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.version = version
                pom.packaging = 'jar'

                pom.project {
                    name 'ORM fetch DSL'
                    description 'A DSL for specifying the eager fetch columns and relations in ORM queries.'
                    url 'https://github.com/ykrasik/orm-fetch-dsl'
                    inceptionYear '2014'

                    scm {
                        url 'https://github.com/ykrasik/orm-fetch-dsl'
                        connection 'scm:https://github.com/ykrasik/orm-fetch-dsl.git'
                        developerConnection 'scm:git://github.com/ykrasik/orm-fetch-dsl.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'ykrasik'
                            name 'Yevgeny Krasik'
                            email 'ykrasik@gmail.com'
                        }
                    }
                }
            }
        }
    }
}